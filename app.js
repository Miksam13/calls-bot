import { Telegraf } from "telegraf";
import dotenv from "dotenv";
import fs from "fs";

dotenv.config();

const { BOT_TOKEN, ADMINS_ID } = process.env;
const bot = new Telegraf(BOT_TOKEN);
const chats = JSON.parse(fs.readFileSync("database/db.json", "utf8"));
const citiesData = fs.readFileSync("database/cities15000.txt", "utf8");
const cities = citiesData.split("\n");
const adminUsersId = [];
const callUsers = [];

bot.telegram.setMyCommands([
  {
    command: "/start",
    description: "Start bot and get notifications from it",
  },
  {
    command: "/allconnects",
    description:
      "Get all users and groups which connected to bot(Admins command)",
  },
  {
    command: "/getpollusers",
    description: "Get all users who will be on the call",
  },
]);

const checkUser = (ctx, next) =>
  adminUsersId.includes(ctx.from.id)
    ? next()
    : ctx.reply("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∞");
ADMINS_ID.split(", ").forEach((id) => adminUsersId.push(+id));
let stateMsg = "pool";
let chat;
let callDay = "—Å–µ–≥–æ–¥–Ω—è";
const optionsPool = ["–Ø –±—É–¥—É", "–ú–µ–Ω—è –Ω–µ –±—É–¥–µ—Ç", "–ë—É–¥—É –ø–æ–∑–∂–µ"];
const regExpValidateTime = /^([01]\d|2[0-3])[:., ]([0-5]\d)/;
const regExpValidateTime2 = /^([01]?[0-9]|2[0-4])/;
const regExpTime = /^([01]\d|[0-2][0-9])[:., ]([0-9]\d)/;
const regExpTime2 = /^[0-9][4-9]/;
const regExpTimePmAm = /^\d{1,2}([:., ]\d{2})?\s*(am|pm|PM|AM|Am|Pm|pM|aM)/;
const regExpTimePmAm2 = /(\d+)\s?(am|pm|PM|AM|Am|Pm|pM|aM)/i;
const regExpTitleChat = /(?<=—á–∞—Ç–µ ).*$/;
const regExpCity = /–ø–æ\s+(.*)/i;
const regExpTimeMessage = /[ ,.]/g;
const regExpTomorrow = /–∑–∞–≤—Ç—Ä–∞/gi;
const regExpWeekDays =
  /–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–≤—Ç–æ—Ä–Ω–∏–∫|—Å—Ä–µ–¥[–∞—É]|—á–µ—Ç–≤–µ—Ä–≥|–ø—è—Ç–Ω–∏—Ü[–∞—É]|—Å—É–±–±–æ—Ç[–∞—É]|–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ/gi;

function findCityMatch(word, wordsArray) {
  for (let i = 0; i < wordsArray.length; i++) {
    const baseWord = wordsArray[i].slice(0, -1);
    if (baseWord === word || baseWord === word.slice(0, -1)) {
      return word.slice(0, -1);
    }
  }
  return null;
}

function findCityName(message) {
  let city = [];
  for (let i = 0; i < cities.length; i++) {
    const cityData = cities[i].split("\t");
    if (cityData[3] !== "" && cityData[3].includes(",")) {
      city = cityData[3].split(",");
    } else {
      city.push(cityData[3]);
    }
    for (let j = 0; j < city.length; j++) {
      if (findCityMatch(message.slice(0, -1), city)) {
        return cityData[17];
      } else if (city[j].toLowerCase() === message.toLowerCase()) {
        return cityData[17];
      }
    }
  }
  return null;
}

bot.start(async (ctx) => {
  chats.push(ctx.message.chat);
  const uniqueIds = [];
  const newChats = [];
  chats.forEach((chat) => {
    if (!uniqueIds.includes(chat.id)) {
      uniqueIds.push(chat.id);
      newChats.push(chat);
    }
  });
  ctx.reply(
    `–ü—Ä–∏–≤–µ—Çüëã, —ç—Ç–æ –±–æ—Çü§ñ –¥–ª—è –≥—Ä—É–ø–øüë•, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤—Ç—å –æ–ø—Ä–æ—Å—ã –Ω–∞—Å—á–µ—Ç —Å–æ–∑–≤–æ–Ω–æ–≤üìû...
    –§–æ—Ä–º–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤ - " (–∫–∞–∫–æ–π-—Ç–æ —Ç–µ–∫—Å—Ç) (–∑–∞–≤—Ç—Ä–∞, —Å–µ–≥–æ–¥–Ω—è, –≤ —Å—É–±–æ—Ç—Ç—É –∏ —Ç. –¥., —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ –º–æ–∂–µ—Ç –∏ –≤–æ–æ–±—â–µ –µ–≥–æ –Ω–µ –±—ã—Ç—å) –≤ —á–∞—Ç–µ (–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞)"
    –ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è - "–Ø —Ö–æ—á—É –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Å–æ–∑–≤–æ–Ω –∑–∞–≤—Ç—Ä–∞ –≤ —á–∞—Ç–µ –ë–æ—Ç –¥–ª—è —Å–æ–∑–≤–æ–Ω–æ–≤"`
  );
  fs.writeFileSync("database/db.json", JSON.stringify(newChats));
});

bot.hears("/allconnects", checkUser, (ctx) => {
  const privates = chats.filter((chat) => chat.type === "private");
  const groups = chats.filter(
    (chat) => chat.type === "supergroup" || chat.type === "group"
  );
  let str = "";

  str += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:";
  privates.forEach(
    (user) =>
      (str += `\n <a href="https://${user.username}.t.me">${user.first_name}</a>`)
  );
  str += "\n–ì—Ä—É–ø–ø—ã: ";
  groups.forEach((group) => (str += `\n ${group.title}`));
  ctx.replyWithHTML(str, { disable_web_page_preview: true });
});

// on future)))
/*
function getNextWeekdayDate(weekday) {
  const weekdaysRegex =
    /–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–≤—Ç–æ—Ä–Ω–∏–∫|—Å—Ä–µ–¥[–∞—É]|—á–µ—Ç–≤–µ—Ä–≥|–ø—è—Ç–Ω–∏—Ü[–∞—É]|—Å—É–±–±–æ—Ç[–∞—É]|–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ/i;
  if (!weekdaysRegex.test(weekday)) {
    throw new Error("Invalid weekday name");
  }

  const weekdaysMap = {
    –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: 1,
    –≤—Ç–æ—Ä–Ω–∏–∫: 2,
    —Å—Ä–µ–¥—É: 3,
    —á–µ—Ç–≤–µ—Ä–≥: 4,
    –ø—è—Ç–Ω–∏—Ü—É: 5,
    —Å—É–±–±–æ—Ç—É: 6,
    –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: 0,
  };

  const today = new Date();
  let date = today.getDate();
  let dayOfWeek = today.getDay();
  let daysUntilNextWeekday = (7 + weekdaysMap[weekday] - dayOfWeek) % 7;

  if (daysUntilNextWeekday === 0) {
    daysUntilNextWeekday = 7;
  }

  date += daysUntilNextWeekday;

  return new Date(today.getFullYear(), today.getMonth(), date);
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const weekday = "–≤—Ç–æ—Ä–Ω–∏–∫";
const nextWeekdayDate = getNextWeekdayDate(weekday);
console.log(getNextWeekdayDate(weekday));
console.log(`–°–ª–µ–¥—É—é—â–∏–π ${weekday} - ${nextWeekdayDate.toLocaleDateString()}`);
*/

bot.on("poll_answer", (ctx) => {
  const { id, username, first_name } = ctx.update.poll_answer.user;
  let option_id = ctx.update.poll_answer.option_ids[0];

  if (option_id === 0) {
    callUsers.push({ id: id, username: username, first_name: first_name });
    bot.telegram.sendMessage(
      id,
      `–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç, –∑–∞ 20 –º–∏–Ω—É—Ç –¥–æ —Å–æ–∑–≤–æ–Ω–∞ –Ω–∞—à –±–æ—Ç —É–≤–µ–¥–æ–º–∏—Ç –≤–∞—Å!!!`
    );
  }
});

bot.hears("/getpollusers", (ctx) => {
  let str = "";
  if (ctx.message.chat.type === "private") {
    ctx.reply("–£—É–ø—Å—Å..., —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ)))");
  } else {
    if (callUsers.length !== 0) {
      str = `–ù–∞ —Å–æ–≤–∑–æ–Ω–µ –±—É–¥—É—Ç:\n`;
      callUsers.map((user) => {
        str += ` <a href="https://${user.username}.t.me">${user.first_name}</a>`;
      });
    } else {
      str += "–ù–∞ —Å–æ–∑–≤–æ–Ω–µ –Ω–∏–∫–æ–≥–æ –Ω–µ –±—É–¥–µ—Ç))))";
    }
    ctx.replyWithHTML(str, { disable_web_page_preview: true });
  }
});

bot.on("message", async (ctx) => {
  const text_message = ctx.message.text;
  const cityMatch = text_message.match(regExpCity);
  let timeZone;

  if (ctx.message.chat.type === "private" && ctx.message.text !== "/start") {
    if (
      regExpValidateTime.test(text_message) ||
      (regExpValidateTime2.test(text_message) && stateMsg === "time")
    ) {
      let time_message;
      if (regExpValidateTime.test(text_message)) {
        time_message =
          text_message.substring(0, 2).replace(regExpTimeMessage, ":") + ":00";
      } else if (regExpTimePmAm.test(text_message)) {
        let time = text_message.match(regExpTimePmAm2);
        let hours = Number(time[1]);
        let minutes = "00";

        if (hours < 10) {
          hours = "0" + hours;
          hours = Number(hours);
        }

        if (time[2].toLowerCase() === "pm" && hours !== 12) {
          hours += 12;
        }

        if (text_message.toLowerCase().includes(cityMatch[0])) {
          time_message = hours + ":" + minutes;
        } else {
          time_message = hours + ":" + minutes + " " + time[2].toLowerCase();
        }
      } else if (regExpValidateTime2.test(text_message)) {
        if (text_message === "24") {
          time_message = "00:00";
        } else {
          time_message = text_message.match(/\d+/)[0] + ":00";
        }
      }
      if (cityMatch !== null) {
        timeZone = findCityName(cityMatch[1]);
        ctx.reply(`–û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω –≤ –≥—Ä—É–ø–ø–µ - ${chat.title}`);
        stateMsg = "poll";
        await bot.telegram.sendPoll(
          chat.id,
          `${ctx.message.chat.username} —Ö–æ—á–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Å–æ–∑–≤–æ–Ω ${callDay} –Ω–∞ ${time_message} –ø–æ –≤—Ä–µ–º–µ–Ω–∏ ${timeZone}`,
          optionsPool,
          { is_anonymous: false }
        );
        callDay = "—Å–µ–≥–æ–¥–Ω—è";
        chat = {};
      } else {
        ctx.reply("–ù–µ –≤–∞–ª–∏–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...");
      }
    } else if (
      regExpTime.test(text_message) ||
      regExpTime2.test(text_message)
    ) {
      stateMsg = "time";
      ctx.reply("–£—É—É—É–ø—Å, —Ç–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –µ—â–µ –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª–∏))))");
    } else if (
      regExpTitleChat.test(text_message)[0] ||
      regExpTitleChat.test(text_message)
    ) {
      let title_chat = text_message.match(regExpTitleChat)[0];
      chat = chats.find((chat) => chat.title === title_chat);
      if (chat) {
        if (regExpTomorrow.test(text_message)) {
          callDay = "–∑–∞–≤—Ç—Ä–∞";
        } else if (regExpWeekDays.test(text_message)) {
          callDay = "–≤ " + text_message.match(regExpWeekDays)[0];
        }
        stateMsg = "time";
        ctx.reply(
          "–í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Å–æ–∑–≤–æ–Ω?(—Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: XX.XX, XX,XX, XX:XX, XX XX, XX am|pm, XX:XX am|pm –∏–ª–∏ XX –ø–æ (–≥–æ—Ä–æ–¥), –Ω–∞–ø—Ä–∏–º–µ—Ä(–ø–æ –ö–∏–µ–≤—É)"
        );
      } else {
        stateMsg = "poll";
        ctx.reply("–¢–∞–∫–æ–≥–æ —á–∞—Ç–∞ –≤ –±–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!!!");
      }
    } else {
      ctx.reply("–ù–µ –≤–∞–ª–∏–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...");
    }
  }
});

bot.launch();
